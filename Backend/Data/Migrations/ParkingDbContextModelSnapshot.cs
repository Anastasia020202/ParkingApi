// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ParkingApi.Data;

#nullable disable

namespace ParkingApi.Data.Migrations
{
    [DbContext(typeof(ParkingDbContext))]
    partial class ParkingDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("ParkingApi.Models.Plaza", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Disponible")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("FechaAlta")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<decimal>("PrecioHora")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Plazas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Disponible = true,
                            FechaAlta = new DateTime(2025, 8, 23, 22, 52, 17, 353, DateTimeKind.Utc).AddTicks(4961),
                            Numero = "A1",
                            PrecioHora = 2.50m,
                            Tipo = "General"
                        },
                        new
                        {
                            Id = 2,
                            Disponible = true,
                            FechaAlta = new DateTime(2025, 8, 23, 22, 52, 17, 353, DateTimeKind.Utc).AddTicks(4968),
                            Numero = "A2",
                            PrecioHora = 2.50m,
                            Tipo = "General"
                        },
                        new
                        {
                            Id = 3,
                            Disponible = true,
                            FechaAlta = new DateTime(2025, 8, 23, 22, 52, 17, 353, DateTimeKind.Utc).AddTicks(4969),
                            Numero = "B1",
                            PrecioHora = 1.50m,
                            Tipo = "Moto"
                        },
                        new
                        {
                            Id = 4,
                            Disponible = true,
                            FechaAlta = new DateTime(2025, 8, 23, 22, 52, 17, 353, DateTimeKind.Utc).AddTicks(4970),
                            Numero = "B2",
                            PrecioHora = 1.50m,
                            Tipo = "Moto"
                        },
                        new
                        {
                            Id = 5,
                            Disponible = true,
                            FechaAlta = new DateTime(2025, 8, 23, 22, 52, 17, 353, DateTimeKind.Utc).AddTicks(4971),
                            Numero = "C1",
                            PrecioHora = 1.00m,
                            Tipo = "PMR"
                        });
                });

            modelBuilder.Entity("ParkingApi.Models.Reserva", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaEmision")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaFin")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("Importe")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("NumeroTicket")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Observaciones")
                        .HasColumnType("longtext");

                    b.Property<int>("PlazaId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAPagar")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.Property<int?>("VehiculoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlazaId");

                    b.HasIndex("UsuarioId");

                    b.HasIndex("VehiculoId");

                    b.ToTable("Reservas");
                });

            modelBuilder.Entity("ParkingApi.Models.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("HashContrasena")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Rol")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<byte[]>("SaltContrasena")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.HasKey("Id");

                    b.ToTable("Usuarios");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Correo = "admin@parking.com",
                            FechaCreacion = new DateTime(2025, 8, 24, 0, 52, 17, 353, DateTimeKind.Local).AddTicks(4799),
                            HashContrasena = "admin",
                            Rol = "Admin",
                            SaltContrasena = new byte[0]
                        });
                });

            modelBuilder.Entity("ParkingApi.Models.Vehiculo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("FechaRegistro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Matricula")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Vehiculos");
                });

            modelBuilder.Entity("ParkingApi.Models.Reserva", b =>
                {
                    b.HasOne("ParkingApi.Models.Plaza", "Plaza")
                        .WithMany("Reservas")
                        .HasForeignKey("PlazaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParkingApi.Models.Usuario", "Usuario")
                        .WithMany("Reservas")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParkingApi.Models.Vehiculo", "Vehiculo")
                        .WithMany("Reservas")
                        .HasForeignKey("VehiculoId");

                    b.Navigation("Plaza");

                    b.Navigation("Usuario");

                    b.Navigation("Vehiculo");
                });

            modelBuilder.Entity("ParkingApi.Models.Vehiculo", b =>
                {
                    b.HasOne("ParkingApi.Models.Usuario", "Usuario")
                        .WithMany("Vehiculos")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("ParkingApi.Models.Plaza", b =>
                {
                    b.Navigation("Reservas");
                });

            modelBuilder.Entity("ParkingApi.Models.Usuario", b =>
                {
                    b.Navigation("Reservas");

                    b.Navigation("Vehiculos");
                });

            modelBuilder.Entity("ParkingApi.Models.Vehiculo", b =>
                {
                    b.Navigation("Reservas");
                });
#pragma warning restore 612, 618
        }
    }
}
