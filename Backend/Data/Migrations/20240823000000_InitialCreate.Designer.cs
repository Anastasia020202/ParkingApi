// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace ParkingApi.Data.Migrations
{
    [DbContext(typeof(ParkingDbContext))]
    [Migration("20240823000000_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ParkingApi.Models.Plaza", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                b.Property<bool>("Disponible")
                    .HasColumnType("tinyint(1)");

                b.Property<string>("Numero")
                    .IsRequired()
                    .HasColumnType("longtext");

                b.Property<decimal>("PrecioHora")
                    .HasColumnType("decimal(65,30)");

                b.Property<string>("Tipo")
                    .IsRequired()
                    .HasColumnType("longtext");

                b.HasKey("Id");

                b.ToTable("Plazas");

                b.HasData(
                    new
                    {
                        Id = 1,
                        Disponible = true,
                        Numero = "A1",
                        PrecioHora = 2.50m,
                        Tipo = "General"
                    },
                    new
                    {
                        Id = 2,
                        Disponible = true,
                        Numero = "A2",
                        PrecioHora = 2.50m,
                        Tipo = "General"
                    },
                    new
                    {
                        Id = 3,
                        Disponible = true,
                        Numero = "B1",
                        PrecioHora = 1.50m,
                        Tipo = "Moto"
                    },
                    new
                    {
                        Id = 4,
                        Disponible = true,
                        Numero = "B2",
                        PrecioHora = 1.50m,
                        Tipo = "Moto"
                    },
                    new
                    {
                        Id = 5,
                        Disponible = true,
                        Numero = "C1",
                        PrecioHora = 1.00m,
                        Tipo = "PMR"
                    });
            });

            modelBuilder.Entity("ParkingApi.Models.Reserva", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                b.Property<DateTime>("FechaFin")
                    .HasColumnType("datetime(6)");

                b.Property<DateTime>("FechaInicio")
                    .HasColumnType("datetime(6)");

                b.Property<int>("PlazaId")
                    .HasColumnType("int");

                b.Property<string>("Estado")
                    .IsRequired()
                    .HasColumnType("longtext");

                b.Property<int>("UsuarioId")
                    .HasColumnType("int");

                b.Property<int?>("VehiculoId")
                    .HasColumnType("int");

                b.HasKey("Id");

                b.HasIndex("PlazaId");

                b.HasIndex("UsuarioId");

                b.HasIndex("VehiculoId");

                b.ToTable("Reservas");
            });

            modelBuilder.Entity("ParkingApi.Models.Ticket", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                b.Property<DateTime>("FechaEmision")
                    .HasColumnType("datetime(6)");

                b.Property<string>("NumeroTicket")
                    .IsRequired()
                    .HasColumnType("longtext");

                b.Property<string>("Observaciones")
                    .HasColumnType("longtext");

                b.Property<int>("ReservaId")
                    .HasColumnType("int");

                b.Property<string>("Estado")
                    .IsRequired()
                    .HasColumnType("longtext");

                b.HasKey("Id");

                b.HasIndex("ReservaId")
                    .IsUnique();

                b.ToTable("Tickets");
            });

            modelBuilder.Entity("ParkingApi.Models.Usuario", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                b.Property<string>("Correo")
                    .IsRequired()
                    .HasColumnType("longtext");

                b.Property<DateTime>("FechaCreacion")
                    .HasColumnType("datetime(6)");

                b.Property<string>("HashContrasena")
                    .IsRequired()
                    .HasColumnType("longtext");

                b.Property<string>("Rol")
                    .IsRequired()
                    .HasColumnType("longtext");

                b.Property<byte[]>("SaltContrasena")
                    .IsRequired()
                    .HasColumnType("longblob");

                b.HasKey("Id");

                b.ToTable("Usuarios");

                b.HasData(
                    new
                    {
                        Id = 1,
                        Correo = "admin@parking.com",
                        FechaCreacion = new DateTime(2024, 8, 23, 0, 0, 0, 0, DateTimeKind.Utc),
                        HashContrasena = "admin",
                        Rol = "Admin",
                        SaltContrasena = new byte[0]
                    });
            });

            modelBuilder.Entity("ParkingApi.Models.Vehiculo", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                b.Property<string>("Color")
                    .HasColumnType("longtext");

                b.Property<string>("Marca")
                    .IsRequired()
                    .HasColumnType("longtext");

                b.Property<string>("Matricula")
                    .IsRequired()
                    .HasColumnType("longtext");

                b.Property<string>("Modelo")
                    .IsRequired()
                    .HasColumnType("longtext");

                b.Property<int>("UsuarioId")
                    .HasColumnType("int");

                b.HasKey("Id");

                b.HasIndex("UsuarioId");

                b.ToTable("Vehiculos");
            });

            modelBuilder.Entity("ParkingApi.Models.Reserva", b =>
            {
                b.HasOne("ParkingApi.Models.Plaza", "Plaza")
                    .WithMany("Reservas")
                    .HasForeignKey("PlazaId")
                    .OnDelete(DeleteBehavior.Restrict)
                    .IsRequired();

                b.HasOne("ParkingApi.Models.Usuario", "Usuario")
                    .WithMany("Reservas")
                    .HasForeignKey("UsuarioId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("ParkingApi.Models.Vehiculo", "Vehiculo")
                    .WithMany("Reservas")
                    .HasForeignKey("VehiculoId")
                    .OnDelete(DeleteBehavior.SetNull);
            });

            modelBuilder.Entity("ParkingApi.Models.Ticket", b =>
            {
                b.HasOne("ParkingApi.Models.Reserva", "Reserva")
                    .WithOne("Ticket")
                    .HasForeignKey("ParkingApi.Models.Ticket", "ReservaId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("ParkingApi.Models.Vehiculo", b =>
            {
                b.HasOne("ParkingApi.Models.Usuario", "Usuario")
                    .WithMany("Vehiculos")
                    .HasForeignKey("UsuarioId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("ParkingApi.Models.Plaza", b =>
            {
                b.Navigation("Reservas");
            });

            modelBuilder.Entity("ParkingApi.Models.Reserva", b =>
            {
                b.Navigation("Ticket");
            });

            modelBuilder.Entity("ParkingApi.Models.Usuario", b =>
            {
                b.Navigation("Reservas");

                b.Navigation("Vehiculos");
            });

            modelBuilder.Entity("ParkingApi.Models.Vehiculo", b =>
            {
                b.Navigation("Reservas");
            });
#pragma warning restore 612, 618
        }
    }
}
